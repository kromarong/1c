
Процедура ЗаявкаПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Регистрировать = Ложь;
	Если Не ЗначениеЗаполнено(Источник.Ссылка)И Источник.СуммаДокумента > 0 Тогда
		Регистрировать = Истина;
	Иначе
		Ссылка = Источник.Ссылка;
		Если ( Источник.СуммаДокумента <> Ссылка.СуммаДокумента
			Или Источник.Дата <> Ссылка.Дата
			Или Источник.Контрагент <> Ссылка.Контрагент)
			И (Источник.СуммаДокумента > 0 Или Ссылка.СуммаДокумента > 0 )  Тогда
				Регистрировать = Истина;
		КонецЕсли;
	КонецЕсли;          
	Если НЕ (Источник.ДополнительныеСвойства.Свойство("Регистрировать") И 
		 Источник.ДополнительныеСвойства.Регистрировать) Тогда
		Источник.ДополнительныеСвойства.Вставить("Регистрировать", Регистрировать);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаявкаПриЗаписиПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Регистрировать") И 
		 Источник.ДополнительныеСвойства.Регистрировать Тогда
		 
		МЗ = РегистрыСведений.ОбъектыКВыгрузке.СоздатьМенеджерЗаписи();
		МЗ.Объект = Источник.Ссылка;
		Если Не МЗ.Выбран() Тогда
			МЗ.ДатаРегистраци = ТекущаяДата();
			МЗ.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ВзаиморасчетыПлатежОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.Дата < '20220401' Тогда
		Возврат;
	КонецЕсли;     
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРС")И Источник.СкрытьДляСоответствий Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЭтоУвеличение = ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРС") 
			Или ТипЗнч(Источник) = Тип("ДокументОбъект.ВыдачаНаличных");
			
	Движения = Источник.Движения.Взаиморасчеты;
	Движения.Записывать = Истина;  
	
	Для Каждого Тек Из Источник.РасшифровкаПлатежа Цикл 
		Если ЗначениеЗаполнено(Тек.Заявка) И  Тек.Заявка.Дата < '20220401' Тогда
			Продолжить;
		КонецЕсли;
		Если ЭтоУвеличение Тогда
			Движение = Движения.добавитьПриход();
		Иначе
			Движение = Движения.добавитьРасход();
		КонецЕсли;  
		Если ЗначениеЗаполнено(Тек.Заявка) Тогда
			Движение.Контрагент = ?(ЗначениеЗаполнено(Тек.Заявка.Плательщик),Тек.Заявка.Плательщик, Тек.Заявка.Контрагент);
		Иначе
			Движение.Контрагент = Источник.Контрагент;
		КонецЕсли;
		Движение.Заявка     = Тек.Заявка;
		Движение.Период     = Источник.Дата;
		Движение.Сумма      = Тек.Сумма;
	КонецЦикла;	                        
	
КонецПроцедуры

Процедура ЗачестьАванс(Движения, КонтрагентПлательщик, Источник) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты.Остатки(
		|			,
		|			 Заявка = &Ссылка) КАК ВзаиморасчетыОстатки";   
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СуммаКЗачету = Выборка.СуммаОстаток;
	Иначе
		СуммаКЗачету = 0;
	КонецЕсли;  
	
	Если СуммаКЗачету <=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Аванс:  - 100
	// Заявка: + 100
	// Движение:
	//     Аванс  Приход
	//     Заявка Расход 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВзаиморасчетыОстатки.Контрагент КАК Контрагент,
		|	ВзаиморасчетыОстатки.СуммаОстаток КАК СуммаОстаток
		|ИЗ
		|	РегистрНакопления.Взаиморасчеты.Остатки(&ГраницаНачало
		|			,
		|			Контрагент = &Контрагент
		|				И Заявка = ЗНАЧЕНИЕ(Документ.Заявка.ПустаяСсылка)) КАК ВзаиморасчетыОстатки";
	
	Запрос.УстановитьПараметр("Контрагент", КонтрагентПлательщик);
	
	Параметры = Новый Массив(2);
	Параметры[0] = Источник.МоментВремени();
	Параметры[1] = ВидГраницы.Исключая;
	Граница = Новый(Тип("Граница"),Параметры);
	Запрос.УстановитьПараметр("ГраницаНачало", Граница);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Аванс = -Выборка.СуммаОстаток;
	Иначе
		Возврат;
	КонецЕсли;   
	
	Зачесть = Мин(Аванс, СуммаКЗачету);   
	Если Зачесть <=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДвижениеЗакр = Движения.добавитьПриход();  
	ДвижениеЗакр.Контрагент = КонтрагентПлательщик;
	ДвижениеЗакр.Период     = Источник.Дата;
	ДвижениеЗакр.Сумма      = Зачесть;     
	ДвижениеЗакр.Содержание = "Зачет аванса";
	
	ДвижениеУм = Движения.добавитьРасход();  
	ДвижениеУм.Контрагент = КонтрагентПлательщик; 
	ДвижениеУм.Заявка     = Источник.Ссылка;
	ДвижениеУм.Период     = Источник.Дата;
	ДвижениеУм.Сумма      = Зачесть;
	ДвижениеУм.Содержание = "Зачет аванса";  
	
КонецПроцедуры

Процедура ВзаиморасчетыЗаявкаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	Если Источник.Дата < '20220401' Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПлательщик = ?(ЗначениеЗаполнено(Источник.Плательщик),Источник.Плательщик, Источник.Контрагент);
	
	// + 100
	Движения = Источник.Движения.Взаиморасчеты;
	Движения.Записывать = Истина;                 
	
	Движение = Движения.добавитьПриход();  
	Движение.Контрагент = КонтрагентПлательщик;
	Движение.Заявка     = Источник.Ссылка;
	Движение.Период     = Источник.Дата;
	Движение.Сумма      = Источник.СуммаДокумента; 
	Движения.Записать();
	
	ЗачестьАванс(Движения, КонтрагентПлательщик, Источник);
	
КонецПроцедуры


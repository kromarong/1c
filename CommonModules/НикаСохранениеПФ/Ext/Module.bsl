Функция ЗаписатьАктPDF(ИДЗаявки, КаталогФайлов)Экспорт
	
	УИД = Новый УникальныйИдентификатор(ИДЗаявки);
	ЗаявкаСсылка = Документы.Заявка.ПолучитьСсылку(УИД);
	Если ЗаявкаСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайла = "Акт " + ЗаявкаСсылка.Номер + " от " + Формат(ЗаявкаСсылка.Дата,"ДФ=yyyy-MM-dd")+".pdf"; 
	ОбъектыСоответствующиеПечатнойФорме = Новый Массив; // [0] - заявка
	ОбъектыСоответствующиеПечатнойФорме.Добавить(ЗаявкаСсылка);
	
	ПараметрыПечати = Новый Структура;
	ОбъектыПечати = Новый СписокЗначений; 
	ОбъектыПечати.Добавить(ЗаявкаСсылка);
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	ВременнаяКоллекцияДляОднойПечатнойФормы = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("Акт");
	
	
	Документы.Заявка.Печать(ОбъектыСоответствующиеПечатнойФорме, ПараметрыПечати, ВременнаяКоллекцияДляОднойПечатнойФормы, 
		ОбъектыПечати, ПараметрыВывода);  
		
	ТабДок = ВременнаяКоллекцияДляОднойПечатнойФормы[0].ТабличныйДокумент; 
	Если Табдок = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	ТабДок.Автомасштаб = Истина;
	ТабДок.Записать(КаталогФайлов + ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ИмяФайла;
	
КонецФункции 


Функция ЗаписатьУслугиЗаПериод(ИДЗаявки, КаталогФайлов)Экспорт
	
	УИД = Новый УникальныйИдентификатор(ИДЗаявки);
	ЗаявкаСсылка = Документы.Заявка.ПолучитьСсылку(УИД);
	Если ЗаявкаСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайла = "Услуги за период " + ЗаявкаСсылка.Номер + " от " + Формат(ЗаявкаСсылка.Дата,"ДФ=yyyy-MM-dd")+".pdf";   
	
	ТаблДок = Новый ТабличныйДокумент;
	
	ОбъектОтчет = Отчеты.УслугиЗаПериод.Создать();

	ОСКД = ОбъектОтчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	
	
	КомпоновщикНастроекДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроекДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОСКД));
	//Настройки = КомпоновщикНастроекДанных.ПолучитьНастройки();
	//Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ОтборПлательщик", Истина);
	
	НастройкиОСКД = ОСКД.НастройкиПоУмолчанию;

//НастройкиОСКД = КомпоновщикНастроек.ПолучитьНастройкиОСКД();

	ПараметрыДанныхОСКД = НастройкиОСКД.ПараметрыДанных.Элементы;
	
	СтПер = Новый СтандартныйПериод(НачалоДня(ЗаявкаСсылка.Дата), КонецДня(ЗаявкаСсылка.Дата));
	ЭлементПериод = ПараметрыДанныхОСКД.Найти("Период");
	ЭлементПериод.Использование = Истина;
	ЭлементПериод.Значение = СтПер;
	
	
	ПараметрОтборПлательщик = ПараметрыДанныхОСКД.Найти("ОтборПлательщик");
	ПараметрОтборПлательщик.Использование = Истина;
	ПараметрОтборПлательщик.Значение = ЗначениеЗаполнено(ЗаявкаСсылка.Плательщик);
	
	ЭлементыОтбора = НастройкиОСКД.Отбор.Элементы;      
	ЛевоКонтрагент = Новый ПолеКомпоновкиДанных("Контрагент");     
	ЛевоПлательщик = Новый ПолеКомпоновкиДанных("Плательщик");
	Для Каждого Элемент Из ЭлементыОтбора Цикл               
		Если Элемент.ЛевоеЗначение = ЛевоКонтрагент Тогда
			Элемент.Использование = Истина;
			Элемент.ПравоеЗначение = ЗаявкаСсылка.Контрагент;   
		ИначеЕсли Элемент.ЛевоеЗначение = ЛевоПлательщик Тогда
			Элемент.Использование = Истина;
			Элемент.ПравоеЗначение = ЗаявкаСсылка.Плательщик;   
		КонецЕсли;
	КонецЦикла;
	
	
	
	//КомпоновщикНастроекДанных.ЗагрузитьНастройкиОСКД(ОСКД.НастройкиОСКДПоУмолчанию);
	
	//КомпоновщикНастроекДанных.ЗагрузитьПользовательскиеНастройкиОСКД(Отчет.КомпоновщикНастроек.ПользовательскиеНастройкиОСКД);
	
	КомпоновщикМакетаОСКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	//Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, КомпоновщикНастроекДанных.ПолучитьНастройкиОСКД());
	
	Макет = КомпоновщикМакетаОСКД.Выполнить(ОСКД, НастройкиОСКД);
	
	ПроцессорКомпоновкиОСКД = Новый ПроцессорКомпоновкиДанных;
	
	ПроцессорКомпоновкиОСКД.Инициализировать(Макет,,,Истина);  
	
	
	
	ТаблДок.Очистить();
	
	ПроцессорВыводаОСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВыводаОСКД.УстановитьДокумент(ТаблДок);
	
	ПроцессорВыводаОСКД.Вывести(ПроцессорКомпоновкиОСКД);
	
	ТаблДок.Автомасштаб = Истина;
	
	ТаблДок.Записать(КаталогФайлов + ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
	
	Возврат ИмяФайла;
	
КонецФункции

Функция ЗаписатьПрисоединенныеФайлы(ИДЗаявки, КаталогФайлов)Экспорт
   
	
	УИД = Новый УникальныйИдентификатор(ИДЗаявки);
	ЗаявкаСсылка = Документы.Заявка.ПолучитьСсылку(УИД);
	Если ЗаявкаСсылка.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивИмен = Новый Массив;

	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("Заявка", ЗаявкаСсылка);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисФайлы.Наименование КАК Наименование,
		|	ПрисФайлы.Ссылка КАК Ссылка,
		|	ПрисФайлы.Расширение КАК Расширение
		|ИЗ
		|	Справочник.ЗаявкаПрисоединенныеФайлы КАК ПрисФайлы
		|ГДЕ
		|	ПрисФайлы.ВладелецФайла = &Заявка
		|И Не ПрисФайлы.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
        ИмяФайла = Выборка.Наименование + "." + Выборка.Расширение;
		ПутьКФайлу = КаталогФайлов + ИмяФайла;
		ФайлХранилище = РаботаСФайлами.ХранилищеФайлаИзИнформационнойБазы(Выборка.Ссылка);
		Если ФайлХранилище = Неопределено Тогда
			Продолжить;
		КонецЕсли;  
		Хранилище = ФайлХранилище.Получить();
		Если Хранилище = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Хранилище.Записать(ПутьКФайлу);
		МассивИмен.Добавить(ИмяФайла);
	КонецЦикла;
	
	Возврат МассивИмен;
	
КонецФункции

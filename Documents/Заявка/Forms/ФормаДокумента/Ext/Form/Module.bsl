///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОписаниеПеременных

// СтандартныеПодсистемы.ОценкаПроизводительности
&НаКлиенте
Перем ИдентификаторЗамераПроведение;
// Конец СтандартныеПодсистемы.ОценкаПроизводительности

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	//	ПредыдущийСтатусЗаказа = Объект.СтатусЗаказа;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(Объект, ЭтотОбъект);
	
	УстановитьВидимостьЭлементов();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		
		Элементы.Договор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.Комментарий.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
		Элементы.ШаблонСообщения.Заголовок = НСтр("ru = 'Шаблон'");
		Элементы.ШаблонСообщения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		Элементы.СчетаНаОплатуНомерСтроки.Видимость = Ложь;
		Элементы.ПартнерыИКонтактныеЛицаНомерСтроки.Видимость = Ложь;
		Элементы.ШапкаСправа.ВыравниваниеЭлементовИЗаголовков =
		ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		Элементы.ГруппаОсновное.ВыравниваниеЭлементовИЗаголовков =
		ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		
	КонецЕсли;
	
	ЭкспертизаИСертификация.ЗаполнитьЗаявкуПриКопировании(Объект);
	
	
КонецПроцедуры


&НаСервере
Функция РольДоступна_Аудитор()
	Возврат РольДоступна("Аудитор");
КонецФункции 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	 //сообщить(объект.Организация);
	
	
	если сокрлп(ПользователиКлиент.текущийпользователь())<>сокрлп(Объект.Эксперт) и 
		//сокрлп(ПользователиКлиент.текущийпользователь())<>"Администратор" и сокрлп(ПользователиКлиент.текущийпользователь())<>"Смоленко И"
		//и  ЭкспертизаИСертификация.Получитьиндексф(ПользователиКлиент.текущийпользователь())<>""
		
		не ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_ПолныеПрава()
		и не ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_Бухгалтер()
		и не РольДоступна_Аудитор()
		тогда 
		Отказ=истина;
	конецесли;
	
	
	если не ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_ПолныеПрава() тогда
		
		если ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_Бухгалтер() тогда
		элементы.ОригиналыПолучены.Доступность=истина;
		//элементы.Оплачена.Доступность=истина;
	    иначе                                                                     //сокрлп(ПользователиКлиент.текущийпользователь())<>"Администратор" и сокрлп(ПользователиКлиент.текущийпользователь())<>"Смоленко И" тогда
		элементы.ОригиналыПолучены.Доступность=Ложь;
		//элементы.Оплачена.Доступность=Ложь;
	    конецесли;
	
		элементы.ДатаПроведения.Доступность=Ложь;
		//элементы.ДатаПроведенияПоследнего.Доступность=Ложь;
		//элементы.ДатаПроведения.Видимость=Ложь;
		//элементы.ДатаПроведенияПоследнего.Видимость=Ложь;
	конецесли;
	
     элементы.Оплачена.Доступность=Ложь;

	Если  ЭкспертизаИСертификация.получитьВариантБизнесПроцессаОбработкиСертификатов()<>1 тогда
		элементы.СертификатыВыгружен.Доступность=Ложь;	 
	конецесли;	 
	
	
	Если  ЭкспертизаИСертификация.ПолучитьПараметрыСинхр().ЭтаБДИсточник тогда
		элементы.НомерДокБДИсточника.Доступность=Ложь;
		элементы.ГодДокБДИсточника.Доступность=Ложь;
		элементы.ЭкспертБДИсточника.Доступность=истина;
		элементы.Кнопка1.Доступность=истина;
	иначе	
		элементы.НомерДокБДИсточника.Доступность=Ложь;
		элементы.ГодДокБДИсточника.Доступность=Ложь;
		элементы.ЭкспертБДИсточника.Доступность=Ложь;
		элементы.Кнопка1.Доступность=Ложь;
	конецесли;	 
	
	
	//элементы.ДатаПроведенияПоследнего.Доступность=Ложь;
	
	
	ОбновитьСчетчикиСтрокТаблиц();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	
	УстановитьВидимостьЭлементов();
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Отказ=ЭкспертизаИСертификация.ПередЗаписьюНаСервереЗаявки(ТекущийОбъект, ПараметрыЗаписи,объект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Параметры.ЗначениеКопирования="";
	РаботаСФайлами.ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	объект.НомерМЭ=ЭкспертизаИСертификация.ПолучитьНомерМЭ(объект.номер,объект.дата,объект.ГруппаТовара,объект.эксперт) ;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.РаботаСФайлами
	РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПодписантов()   
	
	 ДокОбъект = РеквизитФормыВЗначение("Объект");
	 ДокОбъект.ПартнерыИКонтактныеЛица.очистить();
	 
	 стртчоб=ДокОбъект.ПартнерыИКонтактныеЛица.добавить();
	 стртчоб.НаПечать=истина;
	 стртчоб.ФИОЗаказчика=Объект.Контрагент.ФИОЗаказчика;
	 стртчоб.ДолжностьЗаказчика=Объект.Контрагент.ДолжностьЗаказчика;
	 стртчоб.ДействуетНаОсновании=Объект.Контрагент.ДействуетНаОсновании;
	 
	 
	  для каждого стртч из Объект.Контрагент.ИнфоДляПечати Цикл

	 стртчоб=ДокОбъект.ПартнерыИКонтактныеЛица.добавить();
	 
	 стртчоб.ФИОЗаказчика=стртч.ФИОЗаказчика;
	 стртчоб.ДолжностьЗаказчика=стртч.ДолжностьЗаказчика;
	 стртчоб.ДействуетНаОсновании=стртч.ДействуетНаОсновании;
	 КонецЦикла;
	 
	 ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
конецпроцедуры

&НаСервере
Процедура ЗаполнитьПодписантовП()   
	
	 ДокОбъект = РеквизитФормыВЗначение("Объект");
	 ДокОбъект.ПартнерыИКонтактныеЛица.очистить();
	 
	 стртчоб=ДокОбъект.ПартнерыИКонтактныеЛица.добавить();
	 стртчоб.НаПечать=истина;
	 стртчоб.ФИОЗаказчика=Объект.Плательщик.ФИОЗаказчика;
	 стртчоб.ДолжностьЗаказчика=Объект.Плательщик.ДолжностьЗаказчика;
	 стртчоб.ДействуетНаОсновании=Объект.Плательщик.ДействуетНаОсновании;
	 
	 
	  для каждого стртч из Объект.Плательщик.ИнфоДляПечати Цикл

	 стртчоб=ДокОбъект.ПартнерыИКонтактныеЛица.добавить();
	 
	 стртчоб.ФИОЗаказчика=стртч.ФИОЗаказчика;
	 стртчоб.ДолжностьЗаказчика=стртч.ДолжностьЗаказчика;
	 стртчоб.ДействуетНаОсновании=стртч.ДействуетНаОсновании;
	 КонецЦикла;
	 
	 ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
конецпроцедуры


#Область ОбработчикиСобытийЭлементовШапкиФормы



&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементов();
	
	Объект.Договор=ЭкспертизаИСертификация.получитьДоговор(Объект.Контрагент);
	//ЭкспертизаИСертификация.ЗаполнитьПодписантов(ЭтотОбъект);
	ЗаполнитьПодписантов();
	
КонецПроцедуры


&НаСервере
Функция УслугаРеквизиты(Строка_Услуга)
	стст=новый ("Структура");
	стст.Вставить("УчитыватьНДС",Строка_Услуга.УчитыватьНДС);
	стст.Вставить("ОкруглятьПриПересчете",Строка_Услуга.ОкруглятьПриПересчете);
	Возврат стст;
КонецФункции 


&НаКлиенте
Процедура ТоварыПолеПриИзменении(Элемент)
	
	Строка = Элементы.Услуги.ТекущиеДанные;
	
	//Строка.Сумма=ЭкспертизаИСертификация.ЗаявкаТоварыПолеПриИзменении(Строка.К1,Строка.К2,Строка.К3,Строка.Количество,Строка.Цена,Строка.Услуга);
	
	СтруктураСтроки=ЭкспертизаИСертификация.СтруктураСтроки_ЗаявкаТоварыПолеПриИзменении(Строка.К1,Строка.К2,Строка.К3,Строка.Количество,Строка.Цена,Строка.Сумма,Строка.Услуга,Элемент.Имя); //Строка.К1,Строка.К2,Строка.К3,Строка.Количество,Строка.Цена,Строка.Услуга, Этотобъект, ,Элемент
	
	//		
	        если  СтруктураСтроки.ПРОИСХОЖДЕНИЕ тогда
	
			Элементы.УслугиК1.Видимость=СтруктураСтроки.Элементы_УслугиК_Видимость;
			Элементы.УслугиК2.Видимость=СтруктураСтроки.Элементы_УслугиК_Видимость;
			Элементы.УслугиК3.Видимость=СтруктураСтроки.Элементы_УслугиК_Видимость;
	//		
			Строка.К1=СтруктураСтроки.Строка_К1;   
			Строка.К2=СтруктураСтроки.Строка_К2;
			Строка.К3=СтруктураСтроки.Строка_К3;
			
			Строка.Количество=СтруктураСтроки.Строка_Количество;
			Строка.Цена=СтруктураСтроки.Строка_Цена;
	//		
		конецесли;	
	//конецесли;
	
	
		если  СтруктураСтроки.УслугиСумма тогда
		Строка.Цена=СтруктураСтроки.Строка_Цена;
	    конецесли;
		
		Строка.Сумма=СтруктураСтроки.Строка_Сумма;
	    Строка.НДС=СтруктураСтроки.Строка_НДС;
		
	    Строка.Всего=СтруктураСтроки.Строка_Всего;
		
		если  УслугаРеквизиты(Строка.Услуга).УчитыватьНДС и  УслугаРеквизиты(Строка.Услуга).ОкруглятьПриПересчете тогда
		Строка.Всего=окр(Строка.Всего);
		Строка.НДС=Строка.Всего/6;
		Строка.Сумма=Строка.Всего-Строка.НДС;
		конецесли;	
					
			
КонецПроцедуры


// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСчетаНаОплату

&НаКлиенте
Процедура СчетаНаОплатуПриИзменении(Элемент)
	ОбновитьСчетчикиСтрокТаблиц();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПартнерыИКонтактныеЛица

&НаКлиенте
Процедура ПартнерыИКонтактныеЛицаПриИзменении(Элемент)
	ОбновитьСчетчикиСтрокТаблиц();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НаписатьЭлектронноеПисьмо(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.СоздатьЭлектронноеПисьмо(Объект.ЭлектроннаяПочта,
	ПредставлениеЭлектроннойПочты, ВидКонтактнойИнформацииЭлектроннойПочты, Объект.Партнер);
	
КонецПроцедуры

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает строковую константу для формирования сообщений журнала регистрации.
//
// Возвращаемое значение:
//   Строка
//
&НаСервереБезКонтекста
Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Неудачная отправка оповещения'", ОбщегоНазначения.КодОсновногоЯзыка());
	
КонецФункции



&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ВидКонтрагента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ВидКонтрагента");
	Иначе
		ВидКонтрагента = Неопределено;
	КонецЕсли;
	
	Элементы.Договор.Видимость = ВидКонтрагента <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	
	фл=0;
	для каждого стртчу из объект.Услуги цикл 
		если значениезаполнено(стртчу.К1) тогда	
			фл=1;	
			
			прервать;	
		конецесли;	
	конеццикла;	
	
	если фл=0 тогда
		Элементы.УслугиК1.Видимость=Ложь;
		Элементы.УслугиК2.Видимость=Ложь;
		Элементы.УслугиК3.Видимость=Ложь;
	конецесли;
	
	
	
	если ЭкспертизаИСертификация.ПравоУстановкаПризнакаАрхивВЗаявке() тогда
	если объект.Архив тогда
		элементы.ДатаАрхив.Видимость=Истина;
	иначе
		элементы.ДатаАрхив.Видимость=ложь;
	конецесли;

	иначе
		элементы.ДатаАрхив.Доступность=ложь;
		элементы.Архив.Доступность=ложь;
		элементы.ДатаАрхив.Видимость=ложь;
	конецесли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиСтрокТаблиц()
	
	//Элементы.СтраницаСчетаНаОплату.Заголовок = 
	//	?(Объект.СчетаНаОплату.Количество() > 0, 
	//		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Счета на оплату (%1)'"), Объект.СчетаНаОплату.Количество()),
	//		НСтр("ru = 'Счета на оплату'"));
	Элементы.СтраницаПартнерыИКонтактныеЛица.Заголовок = 
	?(Объект.ПартнерыИКонтактныеЛица.Количество() > 0, 
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Контактные лица (%1)'"), Объект.ПартнерыИКонтактныеЛица.Количество()),
	НСтр("ru = 'Контактные лица'"));
	
КонецПроцедуры


&НаКлиенте
Функция СтруктураДанных(ТаблицаФормы)
	
	Перем Результат, ТД;
	
	Результат = Новый Структура;
	
	Если НЕ ТаблицаФормы = Неопределено Тогда
		ТД = ТаблицаФормы.ТекущиеДанные;
		Для Каждого Колонка Из ЭкспертизаИСертификация.КолонкиТаблицы(ТаблицаФормы.Имя) Цикл
			Результат.Вставить(Колонка, ?(ТД = Неопределено, Неопределено, ТД[Колонка]));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции



&НаКлиенте
Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если не ПустаяСтрока(Поле) и Поле.Имя="СертификатыДопЛисты" тогда
		Возврат;
	КонецЕсли;
	
	если Элемент.ТекущиеДанные.НаСайте  и    Поле.Имя="СертификатыНаСайте" тогда
		СтандартнаяОбработка=ложь;
		ии=Элемент.ТекущиеДанные;
		ответ= ЭкспертизаИСертификация.ПолучитьСертификатНаСайте(ии.ВидСертификата,ии.ПолныйНомер,ии.НомерБланка,ии.ДатаСертификата);
		если не ответ.ошибка тогда
			#Если не ВебКлиент Тогда
			
			имяф=ПолучитьИмяВременногоФайла(".pdf");
			
			ответ.тело.Записать(имяф);
			//	КомандаСистемы(имяф) ;
			ЗапуститьПриложение(имяф,,ложь,);
			 #КонецЕсли

		КонецЕсли;
		
		
		
		
		
		возврат
		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидСертификата) и ЗначениеЗаполнено(Элемент.ТекущиеДанные.Страна) тогда 
		СтандартнаяОбработка=ложь;
		СтруктураДанных=СтруктураДанных(Элемент);
		
		СтруктураДанных.Вставить("Организация",объект.Организация);
		СтруктураДанных.Вставить("Эксперт",объект.Эксперт);
		
		
		
		оп = Новый ОписаниеОповещения("ВыполнитьПослеОкончанияРедактированияСертификата", ЭтотОбъект, Элемент.ТекущиеДанные, "ВыполнитьПриОшибкеРедактированияСертификата", ЭтотОбъект);
		
		попытка
			
			//ОткрытьФорму(СтрЗаменить("Документ.Заявка.Форма.ФСертификат"+XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)," ",""),новый структура ("ДанныеСертификата,ТаблицаСертификата",СтруктураДанных,ЭкспертизаИСертификация.ТЧВМасивструктур(объект.ТНВЕД,СтруктураДанных.ид)),ЭтаФорма,,,,оп);
			
			если  ЭкспертизаИСертификация.XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)="ОбщаяАнгл" тогда
				ОткрытьФорму("Документ.Заявка.Форма.ФСертификатОбщая",новый структура ("ДанныеСертификата,ТаблицаСертификата",СтруктураДанных,ЭкспертизаИСертификация.ТЧВМасивструктур(объект.ТНВЕД,СтруктураДанных.ид)),ЭтаФорма,,,,оп);
			иначеесли  ЭкспертизаИСертификация.XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)="СТ2Англ" или ЭкспертизаИСертификация.XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)="СТ3" тогда
				ОткрытьФорму("Документ.Заявка.Форма.ФСертификатСТ2",новый структура ("ДанныеСертификата,ТаблицаСертификата",СтруктураДанных,ЭкспертизаИСертификация.ТЧВМасивструктур(объект.ТНВЕД,СтруктураДанных.ид)),ЭтаФорма,,,,оп);
				
			иначеесли  ЭкспертизаИСертификация.XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)="СТ1ГЗ" тогда
				ОткрытьФорму("Документ.Заявка.Форма.ФСертификатСТ1",новый структура ("ДанныеСертификата,ТаблицаСертификата",СтруктураДанных,ЭкспертизаИСертификация.ТЧВМасивструктур(объект.ТНВЕД,СтруктураДанных.ид)),ЭтаФорма,,,,оп);
				
			иначе	
				ОткрытьФорму(СтрЗаменить("Документ.Заявка.Форма.ФСертификат"+ЭкспертизаИСертификация.XMLстрокаС(Элемент.ТекущиеДанные.ВидСертификата)," ",""),новый структура ("ДанныеСертификата,ТаблицаСертификата",СтруктураДанных,ЭкспертизаИСертификация.ТЧВМасивструктур(объект.ТНВЕД,СтруктураДанных.ид)),ЭтаФорма,,,,оп);
			КонецЕсли;
			
			
		Исключение
			ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось открыть форму данного типа сертификата",,"СертификатыВидСертификата");
			
		КонецПопытки;
		
		
		
	Конецесли
	
КонецПроцедуры



&НаКлиенте

Процедура   ВыполнитьПослеОкончанияРедактированияСертификата(парам1,тд)   Экспорт
	Если ТипЗнч(парам1)=тип("Структура") и      парам1.Команда="ок"  тогда
		
		ЗаполнитьЗначенияСвойств(тд,парам1.ДанныеСертификата);
		перем_тч=объект.ТНВЕД   ;
		ЭкспертизаИСертификация.ЗаполнитьТЧИзМассиваСтруктур(перем_тч,парам1.Таблица,парам1.ДанныеСертификата.Ид);
		КопироватьДанныеФормы(перем_тч, объект.ТНВЕД)  ;
		Записать();
		
	КонецЕсли;
	
	
КонецПроцедуры


&НаКлиенте

Процедура   ВыполнитьПриОшибкеРедактированияСертификата(парам)        Экспорт
	
	Сообщить("ошибка при редактирование сертификата");
КонецПроцедуры





&НаКлиенте
Процедура СертификатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока и не ОтменаРедактирования тогда
		Элемент.ТекущиеДанные.Ид=новый  УникальныйИдентификатор   ;
		элемент.ТекущиеДанные.ДатаСоздания=ТекущаяДата();
	конецесли 
	
	
КонецПроцедуры






&НаКлиенте
Функция  ПолучитьФорматныйНомер(вс,ск,гд,нс)
	
Возврат ЭкспертизаИСертификация.ПолучитьФорматныйНомер(вс,ск,гд,нс);
	
КонецФункции


&НаКлиенте
Процедура ОпредилитьНомера(Команда)
	надозаписывать=ложь;
	НомерДиапаз=ЭкспертизаИСертификация.ПолучитьПоследнийНомерИДиапазон()  ;
	
	Если    НомерДиапаз=Неопределено тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не задан не один рабочий номер диапазона. нумерация не возможна",,"СертификатыОпредилитьНомера");
		
		Возврат ;
		
	Конецесли ;
	
	
	Для каждого ии из объект.Сертификаты цикл
		
		Если ЗначениеЗаполнено(ии.номер) или не ЗначениеЗаполнено(ии.ВидСертификата) или не ЗначениеЗаполнено(ии.Страна) тогда
			Продолжить;
		Конецесли    ;
		
		
		
		
		Год=0;
		номер=0;
		
		Если 	НомерДиапаз.Год=НомерДиапаз.ГодСертификата и   НомерДиапаз.Номер+1>=НомерДиапаз.От и   НомерДиапаз.Номер+1<=НомерДиапаз.до тогда
			
			Год=НомерДиапаз.Год;
			Номер=НомерДиапаз.Номер+1;
			
		Иначеесли НомерДиапаз.ГодСертификата=0 или   НомерДиапаз.Год<>НомерДиапаз.ГодСертификата  тогда
			
			Год=НомерДиапаз.Год;
			Номер=НомерДиапаз.от;
			
		Иначеесли 	 не ЭкспертизаИСертификация.ПроверитьНомерСертификатаНаУникальность(НомерДиапаз.Год,НомерДиапаз.От)  и
			
			объект.Сертификаты.НайтиСтроки(новый Структура("год,номер",НомерДиапаз.Год,НомерДиапаз.от)).количество()=0			
			
			тогда   // у нас новый диапазон
			
			Год=НомерДиапаз.Год;
			Номер=НомерДиапаз.от;
			
			
			
		иначе 	
			ОбщегоНазначенияКлиент.СообщитьПользователю("Закончились,заняты  номера диапазона ",,"СертификатыОпредилитьНомера");
			Прервать;
			
		Конецесли  ;
		
		
		Если   не ЭкспертизаИСертификация.ПроверитьНомерСертификатаНаУникальность(Год,Номер)  Тогда
			
			ии.номер=номер;
			ии.год=год;
			//ии.ПолныйНомер  ="тест"+Год+"."+формат(номер,"ЧЦ=5; ЧВН=; ЧГ=0")  ;
			
			ии.ПолныйНомер  = получитьформатныйномер(сокрлп(ии.ВидСертификата),ЭкспертизаИСертификация.получитькодстраны(ии.Страна),сокрлп(ии.год),ии.номер);
			
			НомерДиапаз.Номер= Номер;
			НомерДиапаз.ГодСертификата=Год   ;
			надозаписывать=истина;
		иначе
			ОбщегоНазначенияКлиент.СообщитьПользователю("Заняты  номера диапазона  ",,"СертификатыОпредилитьНомера");
			
			
		Конецесли 
		
		
	Конеццикла   ;
	
	
	если надозаписывать тогда Записать();     КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСертификат(Команда)
	
	СертификатыВыбор(ЭтаФорма.ТекущийЭлемент, 0, "", "")
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьСертификат(Команда)
	
	серт=Элементы.Сертификаты.ТекущиеДанные;
	
	Если ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_ПолныеПрава() тогда
		
		Если не серт=Неопределено  и не серт.Испорчен  тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("АнулированВопросЗавершение", ЭтотОбъект,серт), "Вы уверены что хотите аннулировать сертификат ?",РежимДиалогаВопрос.ДаНет,10,,"Будет заблокирован, аннулирован");
			
		КонецЕсли;
		
	иначе	
		
		Если не серт=Неопределено и серт.ОтправленВТТПРФ и не серт.Испорчен  тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("АнулированВопросЗавершение", ЭтотОбъект,серт), "Вы уверены что хотите аннулировать сертификат ?",РежимДиалогаВопрос.ДаНет,10,,"Будет заблокирован, аннулирован");
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура УдалитьСертификат(Команда)
	
	//Если  Не ЗначениеЗаполнено(Элементы.Сертификаты.ТекущиеДанные.Номер) Тогда
	//	
	//	Объект.Сертификаты.Удалить(Элементы.Сертификаты.ТекущиеДанные)  ;
	//	
	//КонецЕсли;
	
	Если  Не ЗначениеЗаполнено(Элементы.Сертификаты.ТекущиеДанные.Статус) или сокрлп(Элементы.Сертификаты.ТекущиеДанные.Статус) = "6   - проект" Тогда
		Объект.Сертификаты.Удалить(Элементы.Сертификаты.ТекущиеДанные)  ;
		этотобъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередУдалением(Элемент, Отказ)
	отказ=истина;
КонецПроцедуры



&НаКлиенте
Процедура ГруппаТовараПриИзменении(Элемент)
	
	объект.НомерМЭ=ЭкспертизаИСертификация.получитьНомерМЭ(объект.номер,объект.Дата,объект.ГруппаТовара,объект.Эксперт);
	
КонецПроцедуры


&НаКлиенте
Процедура СертификатыВидСертификатаПриИзменении(Элемент)
	
	Строка = Элементы.Сертификаты.ТекущиеДанные;
	Строка.Страна=ЭкспертизаИСертификация.получитьстрану(сокрлп(Строка.ВидСертификата));
	
	
КонецПроцедуры

&НаКлиенте
Процедура АнулированВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если 	РезультатВопроса = КодВозвратаДиалога.Да
		
		тогда   
		ДополнительныеПараметры.Статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._9");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выгружен(Команда)	
	
	Если  ЭкспертизаИСертификация.получитьВариантБизнесПроцессаОбработкиСертификатов()<>1 тогда
		
		ПоказатьПредупреждение(,"Не соотв. вариант бизнес процесса",7,"Ошибка обработки");
		Возврат;
		
	конецесли;	 
	
	серт=Элементы.Сертификаты.ТекущиеДанные;
	
	Если не серт=Неопределено и не серт.ОтправленВТТПРФ и не серт.Испорчен  тогда
		
		Если    не ЗначениеЗаполнено(серт.страна) тогда
			
			ПоказатьПредупреждение(,"Не заполнена страна сетрификата",7,"Ошибка заполнения");
			Возврат;
		конецесли   ;
		
		Если    не ЗначениеЗаполнено(серт.номербланка) тогда
			
			ПоказатьПредупреждение(,"Не заполнен номер бланка",7,"Ошибка заполнения");
			Возврат;
		конецесли  ;
		
		Если    не ЗначениеЗаполнено(серт.Подписант) тогда
			
			ПоказатьПредупреждение(,"Не выбран подписант",7,"Ошибка заполнения");
			Возврат;
		конецесли ;
		
		Если    не ЗначениеЗаполнено(серт.ПолныйНомер) тогда
			
			ПоказатьПредупреждение(,"Не заполнен номер сертификата",7,"Ошибка заполнения");
			Возврат;
		конецесли   ;
		
		Если    не ЗначениеЗаполнено(серт.ДатаСертификата) тогда
			
			ПоказатьПредупреждение(,"Не заполнена дата сертификата",7,"Ошибка заполнения");
			Возврат;
		конецесли   ;
		
		Если   серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._7") или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._11")
			или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._1") или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._10")
			тогда
		иначе
			ПоказатьПредупреждение(,"Перед отправкой установите нужный статус",7,"Ошибка заполнения");
			Возврат;
		конецесли   ;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыгруженВопросЗавершение", ЭтотОбъект,серт), "Вы уверены, что работы по сертификату закончены и он готов к отправке?",РежимДиалогаВопрос.ДаНет,10,,"Будет заблокирован" );
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгруженВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если 	РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		ДополнительныеПараметры.ОтправленВТТПРФ=истина;
		ДополнительныеПараметры.ДатаИзмСтатусаОтправлСерт=ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                       
Процедура ПечатьСертификата(Команда)
	
	
	
	
	
	МассивОбъектов=Новый Массив;
	массивсертификатов=Новый Массив;
	МассивОбъектов.Добавить(объект.ссылка);
	Если Элементы.Сертификаты.ВыделенныеСтроки.Количество()>0 тогда
		для каждого ии из   Элементы.Сертификаты.ВыделенныеСтроки цикл
			МассивСертификатов.Добавить(объект.Сертификаты[ии].Ид);     
			МассивОбъектов.Добавить(объект.ссылка);
			
		КонецЦикла;
		
		
	иначе
		МассивСертификатов.Добавить(Элементы.Сертификаты.ТекущиеДанные.ид);
		МассивОбъектов.Добавить(объект.ссылка);
		
	конецесли;
	
	парампечати=новый Структура;
	парампечати.Вставить("МассивСертификатов",МассивСертификатов);
	
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Заявка", "ПФ_MXL_СТ1", МассивОбъектов, Этаформа,парампечати );	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьШаблонДляАРМ(Команда)
	серт=Элементы.Сертификаты.ТекущиеДанные;
	
	Если  серт=Неопределено или не  серт.ОтправленВТТПРФ или серт.Испорчен  тогда
		ПоказатьПредупреждение(,"Перед заполнением шаблона сертификат должен быть со статусом: ""отправлен в ВТТП""",7,"Ошибка формирования");
		возврат;
	Конецесли  ;
	
	МассивОбъектов=Новый Массив;
	массивсертификатов=Новый Массив;
	//МассивОбъектов.Добавить(объект.ссылка);
	Если Элементы.Сертификаты.ВыделенныеСтроки.Количество()>0 тогда
		для каждого ии из   Элементы.Сертификаты.ВыделенныеСтроки цикл
			МассивСертификатов.Добавить(объект.Сертификаты[ии].Ид);     
			МассивОбъектов.Добавить(объект.ссылка);
			
		КонецЦикла;
		
		
	иначе
		МассивСертификатов.Добавить(Элементы.Сертификаты.ТекущиеДанные.ид);
		МассивОбъектов.Добавить(объект.ссылка);
		
	конецесли;
	
	парампечати=новый Структура;
	парампечати.Вставить("МассивСертификатов",МассивСертификатов);
	
	если сокрлп(серт.ВидСертификата)="СТ1" тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Заявка", "АРМ_DOC_СТ1", МассивОбъектов, Этаформа,парампечати );
	конецесли;
	
	если сокрлп(серт.ВидСертификата)="СТ2" тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Заявка", "АРМ_DOC_СТ2", МассивОбъектов, Этаформа,парампечати );
	конецесли;
	
	если сокрлп(серт.ВидСертификата)="Общая" тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.Заявка", "АРМ_DOC_Общая", МассивОбъектов, Этаформа,парампечати );
	конецесли;
	
	
	
	Если сокрлп(серт.ВидСертификата)="СТ1 Узбекистан" или сокрлп(серт.ВидСертификата)="EAV" Тогда
		
		Видеав=сокрлп(серт.ВидСертификата)="EAV";
		
		если Видеав тогда
			
			макет=ЭкспертизаСертификацияКлиент.ПолучитьМакетEXEL(ПолучитьМакетНаСервере("АРМ_Exel_EAV"),"XLS");
			
			
		иначе
			макет=ЭкспертизаСертификацияКлиент.ПолучитьМакетEXEL(ПолучитьМакетНаСервере("АРМ_Exel_СТ1_Уз"),"XLS");
			
		КонецЕсли;
		
		
		ДанныеПечати=ЭкспертизаИСертификация.ВернутьДанныеСертификата(серт.Ид,истина);
		лист=макет.COMСоединение.WorkSheets(1);
		Для каждого ии из ДанныеПечати цикл 
			
			Если ии.Ключ ="ТНВЕД"	тогда
				ном=0;
				для каждого стр  из  ии.Значение цикл
					
					ном=ном+1;
					
					//	 Лист.Cells.Replace(ии.Ключ, ""+ии.Значение,1.1)     ;
					
					Лист.Cells.Replace("{печном_"+ном+"}", формат(стр.НомерСтрок,"ЧН=; ЧГ=0"),1.1);
					Лист.Cells.Replace("{печкол"+ном+"}",  формат(стр.мест,"ЧН=; ЧГ=0"),1.1);
					Лист.Cells.Replace("{печтовар"+ном+"}",   формат(стр.Товар,"ЧН=; ЧГ=0"),1.1);
					Лист.Cells.Replace("{печкр"+ном+"}",  формат(стр.КритерийПроисхождения,"ЧН=; ЧГ=0"),1.1);
					Лист.Cells.Replace("{печвес"+ном+"}",   формат(стр.Вес,"ЧН=; ЧГ=0"),1.1);
					Лист.Cells.Replace("{ПечСчетФактура_"+ном+"}",   "",1.1);
					
					
					
					
					
					
					
					
					
					
					
				КонецЦикла;
				
				
				для ном=ном   по 10 цикл
					
					Лист.Cells.Replace("{печном_"+ном+"}", "");
					Лист.Cells.Replace("{печкол"+ном+"}",  "");
					Лист.Cells.Replace("{печтовар"+ном+"}",   "");
					Лист.Cells.Replace("{печкр"+ном+"}",  "");
					Лист.Cells.Replace("{печвес"+ном+"}", "");
					Лист.Cells.Replace("{ПечСчетФактура_"+ном+"}",   "");
					
					
				КонецЦикла;
				
				
				
				
			иначе
				Лист.Cells.Replace("{"+сокрлп(ии.Ключ)+"}", ""+ии.Значение)     ;
				
			КонецЕсли;
			
			
			
		КонецЦикла;
		
		макет.COMСоединение.Application.Visible=истина;
		макет.COMСоединение.Application.WindowState = 2;  //минимизировать окно
		макет.COMСоединение.Application.WindowState = 1;  //максимизировать окно
		макет="";
	КонецЕсли;
	
	
КонецПроцедуры


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры


&НаКлиенте
Функция Выгружен000(серт)
	
	Если не серт=Неопределено и не серт.ОтправленВТТПРФ и не серт.Испорчен  тогда
		
		Если    не ЗначениеЗаполнено(серт.ПолныйНомер) тогда
			
			ПоказатьПредупреждение(,"Не заполнен номер сертификата",7,"Ошибка заполнения");
			Возврат ложь;
		конецесли;
		
		Если    не ЗначениеЗаполнено(серт.страна) тогда
			
			ПоказатьПредупреждение(,"Не заполнена страна сетрификата",7,"Ошибка заполнения "+сокрлп(серт.ПолныйНомер));
			Возврат ложь;
		конецесли   ;
		
		Если    не ЗначениеЗаполнено(серт.номербланка) тогда
			
			ПоказатьПредупреждение(,"Не заполнен номер бланка",7,"Ошибка заполнения "+сокрлп(серт.ПолныйНомер));
			Возврат ложь;
		конецесли  ;
		
		Если    не ЗначениеЗаполнено(серт.Подписант) тогда
			
			ПоказатьПредупреждение(,"Не выбран подписант",7,"Ошибка заполнения "+сокрлп(серт.ПолныйНомер));
			Возврат ложь;
		конецесли ;
		
		
		Если    не ЗначениеЗаполнено(серт.ДатаСертификата) тогда
			
			ПоказатьПредупреждение(,"Не заполнена дата сертификата",7,"Ошибка заполнения "+сокрлп(серт.ПолныйНомер));
			Возврат ложь;
		конецесли;
		
		Если   серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._7") или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._11")
			или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._1") или  серт.статус=ПредопределенноеЗначение("Перечисление.СтатусыСертификатов._10")
			тогда
		иначе
			ПоказатьПредупреждение(,"Перед проверкой установите нужный статус",7,"Ошибка заполнения "+сокрлп(серт.ПолныйНомер));
			Возврат ложь;
		конецесли ;
		
	иначе	
		Возврат ложь;	
	КонецЕсли;
	
	Возврат истина;
	
КонецФункции


&НаКлиенте
Процедура ПроверитьНаСайте(Команда)
	
	
	Для каждого ии из объект.Сертификаты цикл
		
		Если   ЭкспертизаИСертификация.получитьВариантБизнесПроцессаОбработкиСертификатов()=1 тогда
			
			Если   ии.ОтправленВТТПРФ=истина тогда
				ответ= ЭкспертизаИСертификация.ПроверитьСертификатНаСайте(ии.ВидСертификата,ии.ПолныйНомер,ии.НомерБланка,ии.ДатаСертификата);
				если не ответ.ошибка тогда
					ии.НаСайте  =истина;
				иначе	
					сообщить(ии.ПолныйНомер+" номер не найден на сайте РТПП");
				КонецЕсли;
				
			иначе	
				сообщить(ии.ПолныйНомер+" не подготовлен к проверке");
				
			КонецЕсли;
			
		иначеЕсли  ЭкспертизаИСертификация.получитьВариантБизнесПроцессаОбработкиСертификатов()=2 тогда
			
			Если Выгружен000(ии) тогда
				
				ответ= ЭкспертизаИСертификация.ПроверитьСертификатНаСайте(ии.ВидСертификата,ии.ПолныйНомер,ии.НомерБланка,ии.ДатаСертификата);
				если не ответ.ошибка тогда
					ии.НаСайте         =  истина;
					ии.ОтправленВТТПРФ =  истина;
					ии.ДатаИзмСтатусаОтправлСерт = ТекущаяДата();
				иначе	
					сообщить(ии.ПолныйНомер+" номер не найден на сайте РТПП");
				КонецЕсли;
			КонецЕсли;
		иначе	
			сообщить(" Не определен вариант бизнес процесса");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМакетНаСервере(ИмяМакета)
	ЭтотОбъектв=РеквизитФормыВЗначение("Объект");
	Макет = ЭтотОбъектв.ПолучитьМакет(ИмяМакета); 
	Возврат Макет;
КонецФункции 



&НаКлиенте
Процедура СкопироватьВФуфер(Команда)
	
	серт=Элементы.Сертификаты.ТекущиеДанные;
	
	Если    ЗначениеЗаполнено(серт.ПолныйНомер) тогда
		
		ОбъектКопирования = Новый COMОбъект("htmlfile"); 
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", прав(сокрлп(серт.ПолныйНомер),6));		
	конецесли;
	
КонецПроцедуры


&НаКлиенте
Функция  получитьколнулейБланк(дб)
	
	//если вс="А" тогда
	//	КН=-1*(число(стрдлина(сокрлп(нс)))-5);	
	//иначе
	//	КН=-1*(число(стрдлина(сокрлп(нс)))-6);
	//конецесли;	
	
	//кн2="";	
	//ДЛЯ иии=1 по КН цикл
	//	
	//	кн2=кн2+"0";  
	//	
	//конеццикла;   
	
	если  стрдлина(дб)=7 тогда
		возврат "";
	иначеесли  стрдлина(дб)=6 тогда
		возврат "0";
	иначеесли стрдлина(дб)=5 тогда
		возврат "00";
	иначеесли стрдлина(дб)=4 тогда
		возврат "000";
	иначеесли стрдлина(дб)=3 тогда
		возврат "0000";
	иначеесли стрдлина(дб)=2 тогда
		возврат "00000";
	конецесли;
	
КонецФункции

&НаКлиенте
Процедура СкопирВБуфНомБ(Команда)
	серт=Элементы.Сертификаты.ТекущиеДанные;
	
	Если    ЗначениеЗаполнено(серт.номербланка) тогда
		
		дб=сокрлп(формат(серт.номербланка,"ЧГ=0"));
		кн=получитьколнулейБланк(дб);
		
		
		ОбъектКопирования = Новый COMОбъект("htmlfile"); 
		//ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", сокрлп(формат(серт.номербланка,"ЧГ=0")));
		ОбъектКопирования.ParentWindow.ClipboardData.SetData("Text", кн+дб);
		
	конецесли;
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	 серт=Элементы.Сертификаты.ТекущиеДанные;

	если  Копирование и не сокрлп(серт.Статус)="8   - испорчен бланк" тогда
		Отказ=истина;
	конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерыИКонтактныеЛицаНаПечатьПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	//текстрока=элементы.ПартнерыИКонтактныеЛица.ТекущиеДанные;
	//
	//для каждого стртч из 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПлательщикПриИзменении(Элемент)
	ЗаполнитьПодписантовП();
КонецПроцедуры

&НаКлиенте
Процедура СертификатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	если НоваяСтрока тогда
	серт=Элементы.Сертификаты.ТекущиеДанные;
	серт.Статус="";
	серт.НомерБланка="";
	конецесли;	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьНаСервере()
	// Вставить содержимое обработчика.
	
ЭкспертизаИСертификация.Синхронизация(Объект.Ссылка);	
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	Записать();
	СинхронизироватьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АрхивПриИзменении(Элемент)
	если объект.Архив тогда
		элементы.ДатаАрхив.Видимость=Истина;
		//объект.ДатаАрхив=текущаядата();
	иначе
		элементы.ДатаАрхив.Видимость=ложь;
		//объект.ДатаАрхив="";
	конецесли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды



#КонецОбласти

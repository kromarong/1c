///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// 		если   Объект.Ссылка.Пустая()
	//	 и сокрлп(Пользователи.текущийпользователь())<>"Администратор" 
	//	 и  ЭкспертизаИСертификация.Получитьиндексф(Пользователи.текущийпользователь())=""
	//	тогда 
	//Отказ=истина;
	//конецесли;

		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
	Объект_Основание = ЗначениеЗаполнено(Объект.Основание);
	
	Элементы.Основание.Видимость = Объект_Основание;
	Элементы.ПериодВыборкиЗаявок.Видимость = НЕ Объект_Основание;
	Элементы.ТоварыЗаявка.Видимость = НЕ Объект_Основание;
	Элементы.Кнопка1.Видимость= Объект_Основание;
	
	
	Если Пользователи.ЭтоСеансВнешнегоПользователя() Тогда
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.Договор.Видимость = Ложь;
		Элементы.Ответственный.Видимость = Ложь;
	КонецЕсли;
	
	//// СтандартныеПодсистемы.РаботаСФайлами
	//ГиперссылкаФайлов = РаботаСФайлами.ГиперссылкаФайлов();
	//ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
	//РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ОбщегоНазначения.ЭтоМобильныйКлиент() Тогда
		Элементы.ТоварыНомерСтроки.Видимость = Ложь;
		Элементы.ГруппаШапка.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
		Элементы.КомментарийИОтветственный.ВыравниваниеЭлементовИЗаголовков = ВариантВыравниванияЭлементовИЗаголовков.ЭлементыПравоЗаголовкиЛево;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//Если Объект.ВалютаДокумента.Пустая() И Не Объект.Договор.Пустая() Тогда
	//	Объект.ВалютаДокумента = ВалютаДоговора(Объект.Договор);
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.СуммаДокумента=объект.Товары.Итог("Всего");
	КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	
	
	Оповестить("Запись__СчетНаОплатуПокупателю", Новый Структура, Объект.Ссылка);
	
КонецПроцедуры


&НаКлиенте
Процедура ОснВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) экспорт	
	
	Если 	РезультатВопроса = КодВозвратаДиалога.Да тогда
	иначе
		этаформа.Закрыть();
	КонецЕсли;
	
	
КонецПроцедуры


&НаСервере
функция ЕстьЛиУжеСчет(дкзаявка) экспорт	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетНаОплатуПокупателю.Основание КАК Основание
	|ИЗ
	|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
	|ГДЕ
	|	СчетНаОплатуПокупателю.Основание = &Основание";
	
	Запрос.УстановитьПараметр("Основание", дкзаявка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	если ВыборкаДетальныеЗаписи.Следующий() тогда
		возврат истина;	
	иначе
		возврат ложь;
	Конецесли;
	
Конецфункции


&НаСервере
Функция РольДоступна_Аудитор()
	Возврат РольДоступна("Аудитор");
КонецФункции 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
		  
	если сокрлп(ПользователиКлиент.текущийпользователь())<>сокрлп(Объект.Эксперт) и 
		 //сокрлп(ПользователиКлиент.текущийпользователь())<>"Администратор" и сокрлп(ПользователиКлиент.текущийпользователь())<>"Смоленко И"
		 //и  ЭкспертизаИСертификация.Получитьиндексф(ПользователиКлиент.текущийпользователь())<>""
		 не ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_ПолныеПрава()
		 и не ЭкспертизаИСертификация.РольДоступна_Метаданные_Роли_Бухгалтер()
		 и не РольДоступна_Аудитор()
		тогда 
	Отказ=истина;
	конецесли;
	
	если   Объект.Ссылка.Пустая() тогда
	если   ЗначениеЗаполнено(Объект.Основание) тогда
		если ЕстьЛиУжеСчет(Объект.Основание)тогда	  
			ПоказатьВопрос(Новый ОписаниеОповещения("ОснВопросЗавершение", ЭтотОбъект,""), "На осн. уже создан счет! Вы уверены что хотите продолжить?",РежимДиалогаВопрос.ДаНет,1000,,"Новый счет");
			//Отказ=истина;
		конецесли;
	конецесли;	  
	конецесли;
	
	ОбновитьСчетчикиСтрокТаблиц();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//	// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
		
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	//	// СтандартныеПодсистемы.РаботаСФайлами
	//РаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	//// Конец СтандартныеПодсистемы.РаботаСФайлами

КонецПроцедуры

//&НаСервере
//Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
//	
//	//если  Объект.НомерМТПП=""  тогда  //и значениезаполнено(Объект.Основание)
//	//	Объект.НомерМТПП=ЭкспертизаИСертификация.получитьНомерМТПП(Объект,Объект.Основание);
//	//конецесли;
//	//
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	//Если Объект.ВалютаДокумента.Пустая() И Не Объект.Договор.Пустая() Тогда
	//	Объект.ВалютаДокумента = ВалютаДоговора(Объект.Договор);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
КонецПроцедуры

//// СтандартныеПодсистемы.РаботаСФайлами
//&НаКлиенте
//Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)

//	//РаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);

//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

//	РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
//				ПараметрыПеретаскивания, СтандартнаяОбработка);

//КонецПроцедуры

//&НаКлиенте
//Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)

//	РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
//				ПараметрыПеретаскивания, СтандартнаяОбработка);

//КонецПроцедуры
//// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	ОбновитьСчетчикиСтрокТаблиц();
КонецПроцедуры

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ПараметрыЗагрузки = ЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "СчетНаОплатуПокупателю.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("ru = 'Загрузка списка товаров из файла'");
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("Контрагент", Объект.Контрагент);
	ДополнительныеПараметры.Вставить("Организация", Объект.Организация);
	ПараметрыЗагрузки.ДополнительныеПараметры = ДополнительныеПараметры;
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	ЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


//// СтандартныеПодсистемы.РаботаСФайлами
//&НаКлиенте
//Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)

//	РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);

//КонецПроцедуры
//// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	ПересчитатьТабличнуюЧасть();
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	ФункциональнаяОпцияХарактеристика = ?(ЗагруженныеДанные.Колонки.Найти("Характеристика") <> Неопределено, Истина, Ложь);
	Для каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		НоваяСтрокаТовары.Номенклатура = СтрокаТаблицы.Номенклатура;
		НоваяСтрокаТовары.Цена = СтрокаТаблицы.Цена;
		НоваяСтрокаТовары.Количество = СтрокаТаблицы.Количество;
		Если ФункциональнаяОпцияХарактеристика Тогда
			НоваяСтрокаТовары.Характеристика = СтрокаТаблицы.Характеристика;
		КонецЕсли;
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла


&НаКлиенте
Процедура ПересчитатьТабличнуюЧасть()
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		СтрокаТаблицы.Сумма = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
		СтрокаТаблицы.Всего = СтрокаТаблицы.Количество * СтрокаТаблицы.Цена;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиСтрокТаблиц()
	УстановитьЗаголовокСтраницы(Элементы.СтраницаТовары, Объект.Товары, НСтр("ru = 'Услуги'"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокСтраницы(ЭлементСтраница, РеквизитТабличнаяЧасть, ЗаголовокПоУмолчанию)
	ЗаголовокСтраницы = ЗаголовокПоУмолчанию;
	Если РеквизитТабличнаяЧасть.Количество() > 0 Тогда
		ЗаголовокСтраницы = ЗаголовокПоУмолчанию + " (" + РеквизитТабличнаяЧасть.Количество() + ")";
	КонецЕсли;
	ЭлементСтраница.Заголовок = ЗаголовокСтраницы;
КонецПроцедуры


&НаКлиенте
Процедура ТоварыПолеПриИзменении(Элемент)
	
	  Строка = Элементы.Товары.ТекущиеДанные;
	  Строка.Сумма=Строка.Количество*Строка.Цена;
	  Строка.Всего=Строка.Сумма;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	
	  Строка = Элементы.Товары.ТекущиеДанные;
	  Строка.Цена=Строка.Сумма/Строка.Количество;
	  
	  //Строка.Сумма=Строка.Количество*Строка.Цена;
	  Строка.Всего=Строка.Сумма;
	
КонецПроцедуры

&НаСервере
Процедура ВыбратьЗаявкиЗаПериодНаСервере()    // дн,до
	
	 объект.Товары.Загрузить(ЭкспертизаИСертификация.ВыбратьЗаявкиЗаПериодНаСервере(ПериодВыборкиЗаявок.ДатаНачала,ПериодВыборкиЗаявок.ДатаОкончания,объект.Контрагент));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗаявкиЗаПериод(Команда)
	объект.Товары.Очистить();
	ВыбратьЗаявкиЗаПериодНаСервере();	
КонецПроцедуры

//////////////////////////////////////////////////по основанию

&НаСервере
Процедура ЗаполнитьПоОснованию2(ОснованиеС) 		
объект.Организация=ОснованиеС.Организация;
объект.Ответственный=ОснованиеС.Эксперт;
объект.Эксперт=ОснованиеС.Эксперт;
объект.Контрагент=?(значениезаполнено(ОснованиеС.Плательщик),ОснованиеС.Плательщик,ОснованиеС.Контрагент);
объект.КонечныйПолучатель=ОснованиеС.Контрагент;
объект.Договор=?(значениезаполнено(ОснованиеС.ДоговорПлательщика),ОснованиеС.ДоговорПлательщика,ОснованиеС.Договор);

Объект.НомерМТПП=ЭкспертизаИСертификация.получитьНомерМТПП(Объект,ОснованиеС);

КонецПроцедуры

&НаСервере
Процедура СкопироватьТовары(Основание) 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст = "ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Услуга КАК Номенклатура,
	|	РеализацияТоваровУслугТовары.Цена,
	|	РеализацияТоваровУслугТовары.Сумма,
	|	РеализацияТоваровУслугТовары.Всего,
	|	РеализацияТоваровУслугТовары.ДопИнформацияПоУслуге,
	|	РеализацияТоваровУслугТовары.Количество
	|ИЗ
	|	Документ.Заявка.Услуги КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка";
	объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументуОснованию(Основание)

	Если ТипЗнч(Основание) = Тип("ДокументСсылка.Заявка") Тогда
		ЗаполнитьПоОснованию2(Основание);
		// Заполним табличные части
		СкопироватьТовары(Основание);
     КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьПооснованию(Команда)
	ЗаполнитьПоДокументуОснованию(объект.Основание);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	об= ТекущийОбъект;
	//обф=ЭтотОбъект;
	если  ТекущийОбъект.НомерМТПП=""  тогда
	об.НомерМТПП=ЭкспертизаИСертификация.получитьНомерМТПП(ТекущийОбъект,ТекущийОбъект.Основание);
	об.Записать(РежимЗаписиДокумента.Запись);
	//ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписи));
	конецесли;
	
КонецПроцедуры


#КонецОбласти



